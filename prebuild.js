// Prebuild script for GContactsCast
// Handles environment variables and creates the config.js file
const fs = require('fs-extra');
const path = require('path');
const dotenv = require('dotenv');

console.log('=== GContactsCast Prebuild Process Starting ===');
console.log('Node version:', process.version);
console.log('Current directory:', process.cwd());

// Load environment variables from .env file if it exists (for local development)
try {
  const result = dotenv.config();
  if (result.parsed) {
    console.log('✅ Loaded environment variables from .env file');
  } else {
    console.log('No .env file found, using system environment variables');
  }
} catch (error) {
  console.warn('⚠️ Could not load .env file, will use system environment variables');
}

// Access and validate environment variables
const clientId = process.env.GOOGLE_CLIENT_ID;
const apiKey = process.env.GOOGLE_API_KEY;

if (!clientId) {
  console.error('❌ ERROR: GOOGLE_CLIENT_ID environment variable is not set');
  process.exit(1);
}

if (!apiKey) {
  console.error('❌ ERROR: GOOGLE_API_KEY environment variable is not set');
  process.exit(1);
}

// Simple function to encode a string (reverse + base64)
function encodeCredential(str) {
  if (!str) return '';
  return Buffer.from(str).toString('base64').split('').reverse().join('');
}

// Create the js directory if it doesn't exist
const jsDir = path.join(__dirname, 'js');
if (!fs.existsSync(jsDir)) {
  fs.mkdirSync(jsDir, { recursive: true });
}

// Create the config.js file with obfuscated credentials
const configContent = `// Configuration file for GContactsCast
// Generated by prebuild script on ${new Date().toISOString()}

const CONFIG = (function() {
    // Simple utility to decode obfuscated credentials
    function deobfuscate(encoded) {
        if (!encoded || encoded === '{{ENCODED_CLIENT_ID}}' || encoded === '{{ENCODED_API_KEY}}') {
            console.error('[Config] Missing encoded credential');
            return 'MISSING_CREDENTIAL';
        }
        
        try {
            // Decode from base64 and reverse the string
            return atob(encoded.split('').reverse().join(''));
        } catch (error) {
            console.error('[Config] Decoding error:', error.message);
            return 'INVALID_CREDENTIAL';
        }
    }
    
    // These values are replaced by the build script
    const encodedClientId = '${encodeCredential(clientId)}';
    const encodedApiKey = '${encodeCredential(apiKey)}';
    
    return {
        // Client ID getter
        get CLIENT_ID() {
            return deobfuscate(encodedClientId);
        },
        
        // API Key getter
        get API_KEY() {
            return deobfuscate(encodedApiKey);
        },
        
        // Constants
        SCOPES: 'https://www.googleapis.com/auth/contacts.readonly',
        DISCOVERY_DOC: 'https://people.googleapis.com/$discovery/rest?version=v1',
        VERSION: 'v1.0.0-${new Date().toISOString().split('T')[0]}',
        
        // Check if configuration is valid
        isValid: function() {
            const clientId = this.CLIENT_ID;
            const apiKey = this.API_KEY;
            
            return clientId !== 'MISSING_CREDENTIAL' && 
                   clientId !== 'INVALID_CREDENTIAL' &&
                   apiKey !== 'MISSING_CREDENTIAL' && 
                   apiKey !== 'INVALID_CREDENTIAL';
        }
    };
})();
`;

// Write the config file
const configPath = path.join(jsDir, 'config.js');
fs.writeFileSync(configPath, configContent, 'utf8');
console.log(`✅ Created config.js with obfuscated credentials`);

// Also create a simple backup config file as a fallback
const backupConfigContent = `// Backup Configuration for GContactsCast
// Used if main config fails to load

window.CONFIG = {
    CLIENT_ID: "${process.env.GOOGLE_CLIENT_ID || 'MISSING_CLIENT_ID_CHECK_ENV_VARS'}",
    API_KEY: "${process.env.GOOGLE_API_KEY || 'MISSING_API_KEY_CHECK_ENV_VARS'}",
    SCOPES: "https://www.googleapis.com/auth/contacts.readonly",
    DISCOVERY_DOC: "https://people.googleapis.com/$discovery/rest?version=v1",
    VERSION: "backup-${new Date().toISOString().split('T')[0]}",
    isValid: function() {
        return this.CLIENT_ID !== 'MISSING_CLIENT_ID_CHECK_ENV_VARS' && 
               this.API_KEY !== 'MISSING_API_KEY_CHECK_ENV_VARS';
    }
};

console.log("[CONFIG] Backup config loaded");
`;

// Write the backup config file
const backupConfigPath = path.join(jsDir, 'config.backup.js');
fs.writeFileSync(backupConfigPath, backupConfigContent, 'utf8');
console.log(`✅ Created config.backup.js as fallback`);

console.log('✅ Prebuild process completed successfully');
